@PACKAGE_INIT@

set(GINKGO_PROJECT_NAME "@PROJECT_NAME@")
set(GINKGO_PROJECT_VERSION @Ginkgo_VERSION@)
set(GINKGO_PROJECT_DESCRIPTION "@Ginkgo_DESCRIPTION@")

# Extra version information
set(GINKGO_VERSION_MAJOR @Ginkgo_VERSION_MAJOR@)
set(GINKGO_VERSION_MINOR @Ginkgo_VERSION_MINOR@)
set(GINKGO_VERSION_PATCH @Ginkgo_VERSION_PATCH@)

# Git information
set(GINKGO_GIT_BRANCH "@GINKGO_GIT_BRANCH@")
set(GINKGO_GIT_REVISION "@GINKGO_GIT_REVISION@")
set(GINKGO_GIT_SHORTREV "@GINKGO_GIT_SHORTREV@")

# CMake build configuration
set(GINKGO_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
set(GINKGO_BUILD_SHARED_LIBS "@BUILD_SHARED_LIBS@")
set(GINKGO_DEBUG_POSTFIX "@CMAKE_DEBUG_POSTFIX@")

# Compiler configuration
set(GINKGO_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(GINKGO_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@)

set(GINKGO_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
set(GINKGO_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@")
set(GINKGO_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@")

set(GINKGO_EXE_LINKER_FLAGS "@CMAKE_EXE_LINKER_FLAGS@")
set(GINKGO_EXE_LINKER_FLAGS_DEBUG "@CMAKE_EXE_LINKER_FLAGS_DEBUG@")
set(GINKGO_EXE_LINKER_FLAGS_RELEASE "@CMAKE_EXE_LINKER_FLAGS_RELEASE@")

# Ginkgo configuration
set(GINKGO_BUILD_REFERENCE @GINKGO_BUILD_REFERENCE@)
set(GINKGO_BUILD_OMP @GINKGO_BUILD_OMP@)
set(GINKGO_BUILD_CUDA @GINKGO_BUILD_CUDA@)
set(GINKGO_BUILD_HIP @GINKGO_BUILD_HIP@)
set(GINKGO_BUILD_MPI @GINKGO_BUILD_MPI@)
set(GINKGO_BUILD_SYCL @GINKGO_BUILD_SYCL@)

set(GINKGO_DEVEL_TOOLS @GINKGO_DEVEL_TOOLS@)
set(GINKGO_BUILD_TESTS @GINKGO_BUILD_TESTS@)
set(GINKGO_BUILD_EXAMPLES @GINKGO_BUILD_EXAMPLES@)
set(GINKGO_BUILD_EXTLIB_EXAMPLE @GINKGO_BUILD_EXTLIB_EXAMPLE@)
set(GINKGO_BUILD_BENCHMARKS @GINKGO_BUILD_BENCHMARKS@)

set(GINKGO_BUILD_DOC @GINKGO_BUILD_DOC@)
set(GINKGO_DOC_GENERATE_EXAMPLES @GINKGO_DOC_GENERATE_EXAMPLES@)
set(GINKGO_DOC_GENERATE_PDF @GINKGO_DOC_GENERATE_PDF@)
set(GINKGO_DOC_GENERATE_DEV @GINKGO_DOC_GENERATE_DEV@)

set(GINKGO_SKIP_DEPENDENCY_UPDATE @GINKGO_SKIP_DEPENDENCY_UPDATE@)
set(GINKGO_VERBOSE_LEVEL @GINKGO_VERBOSE_LEVEL@)

set(GINKGO_WITH_CLANG_TIDY @GINKGO_WITH_CLANG_TIDY@)
set(GINKGO_WITH_IWYU @GINKGO_WITH_IWYU@)
set(GINKGO_CLANG_TIDY_PATH @GINKGO_CLANG_TIDY_PATH@)
set(GINKGO_IWYU_PATH @GINKGO_IWYU_PATH@)

set(GINKGO_JACOBI_FULL_OPTIMIZATIONS @GINKGO_JACOBI_FULL_OPTIMIZATIONS@)

set(GINKGO_CUDA_ARCHITECTURES "@CMAKE_CUDA_ARCHITECTURES@")
set(GINKGO_CUDA_HOST_COMPILER "@CMAKE_CUDA_HOST_COMPILER@")

set(GINKGO_HIP_COMPILER_FLAGS "@GINKGO_HIP_COMPILER_FLAGS@")
set(GINKGO_HIP_HCC_COMPILER_FLAGS "@GINKGO_HIP_HCC_COMPILER_FLAGS@")
set(GINKGO_HIP_NVCC_COMPILER_FLAGS "@GINKGO_HIP_NVCC_COMPILER_FLAGS@")
set(GINKGO_HIP_CLANG_COMPILER_FLAGS "@GINKGO_HIP_CLANG_COMPILER_FLAGS@")
set(GINKGO_HIP_PLATFORM @GINKGO_HIP_PLATFORM@)
set(GINKGO_HIP_PLATFORM_AMD_REGEX "@HIP_PLATFORM_AMD_REGEX@")
set(GINKGO_HIP_PLATFORM_NVIDIA_REGEX "@HIP_PLATFORM_NVIDIA_REGEX@")
set(GINKGO_HIP_AMDGPU "@GINKGO_HIP_AMDGPU@")
set(GINKGO_HIP_VERSION @GINKGO_HIP_VERSION@)
set(GINKGO_AMD_ARCH_FLAGS "@GINKGO_AMD_ARCH_FLAGS@")

set(GINKGO_DPCPP_VERSION @GINKGO_DPCPP_VERSION@)
set(GINKGO_DPCPP_MAJOR_VERSION @GINKGO_DPCPP_MAJOR_VERSION@)
set(GINKGO_DPCPP_FLAGS "@GINKGO_DPCPP_FLAGS@")
set(GINKGO_MKL_ROOT "@GINKGO_MKL_ROOT@")
set(GINKGO_DPL_ROOT "@GINKGO_DPL_ROOT@")

set(GINKGO_BUILD_MPI @GINKGO_BUILD_MPI@)

set(GINKGO_HAVE_PAPI_SDE @GINKGO_HAVE_PAPI_SDE@)

set(GINKGO_HAVE_HWLOC @GINKGO_HAVE_HWLOC@)

set(GINKGO_HAVE_ROCTX @GINKGO_HAVE_ROCTX@)

# Ginkgo compiler information
set(GINKGO_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(GINKGO_CXX_COMPILER_SHORT "@CMAKE_CXX_COMPILER_ID@:@CMAKE_CXX_COMPILER_VERSION@")
set(GINKGO_CUDA_COMPILER "@CMAKE_CUDA_COMPILER@")
set(GINKGO_CUDA_COMPILER_SHORT "@CMAKE_CUDA_COMPILER_ID@:@CMAKE_CUDA_COMPILER_VERSION@")
set(GINKGO_CUDA_HOST_COMPILER "@CMAKE_CUDA_HOST_COMPILER@")
set(GINKGO_CUDA_HOST_COMPILER_SHORT "")  # dummy value to stay consistent

# Ginkgo installation configuration
set(GINKGO_EXPORT_BINARY_DIR "@GINKGO_EXPORT_BINARY_DIR@")
if(NOT GINKGO_EXPORT_BINARY_DIR)
    set_and_check(GINKGO_INSTALL_PREFIX "@PACKAGE_CMAKE_INSTALL_PREFIX@")
    set_and_check(GINKGO_INSTALL_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
    set_and_check(GINKGO_INSTALL_LIBRARY_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
    set(GINKGO_INSTALL_RPATH_FOR_HIP "-Wl,-rpath,${GINKGO_INSTALL_LIBRARY_DIR}")
    set(GINKGO_INSTALL_RPATH @GINKGO_INSTALL_RPATH@)
    set(GINKGO_INSTALL_RPATH_USE_ORIGIN @GINKGO_INSTALL_RPATH_USE_ORIGIN@)
    set(GINKGO_INSTALL_RPATH_DEPENDENCIES @GINKGO_INSTALL_RPATH_DEPENDENCIES@)
endif()

# Forward Ginkgo's MODULE PATH and the PREFIX PATH for HIP and more
set_and_check(GINKGO_INSTALL_MODULE_DIR "@PACKAGE_GINKGO_INSTALL_MODULE_DIR@")
list(APPEND CMAKE_MODULE_PATH "${GINKGO_INSTALL_MODULE_DIR}")
if(GINKGO_BUILD_HIP)
    list(APPEND CMAKE_MODULE_PATH "@GINKGO_HIP_MODULE_PATH@")
endif()

set(GINKGO_INTERFACE_LINK_LIBRARIES "@GINKGO_INTERFACE_LINK_LIBRARIES@")
set(GINKGO_INTERFACE_LINK_FLAGS "@GINKGO_INTERFACE_LINK_FLAGS@")
set(GINKGO_INTERFACE_CXX_FLAGS "@GINKGO_INTERFACE_CXX_FLAGS@")

# CUDA
set(GINKGO_CUDA_COMPILER "@CMAKE_CUDA_COMPILER@")
set(GINKGO_CUDA_COMPILER_VERSION @CMAKE_CUDA_COMPILER_VERSION@)
set(GINKGO_CUDA_HOST_LINK_LAUNCHER "@CMAKE_CUDA_HOST_LINK_LAUNCHER@")

set(GINKGO_CUDA_FLAGS "@CMAKE_CUDA_FLAGS_MODIFY@")
set(GINKGO_CUDA_FLAGS_DEBUG "@CMAKE_CUDA_FLAGS_DEBUG_MODIFY@")
set(GINKGO_CUDA_FLAGS_RELEASE "@CMAKE_CUDA_FLAGS_RELEASE_MODIFY@")

# OpenMP
set(GINKGO_OPENMP_VERSION @OpenMP_CXX_VERSION@)

set(GINKGO_OPENMP_LIB_NAMES "@OpenMP_CXX_LIB_NAMES@")
set(GINKGO_OPENMP_LIBRARIES "@OpenMP_CXX_LIBRARIES@")

set(GINKGO_OPENMP_FLAGS "@OpenMP_CXX_FLAGS@")

set(GINKGO_HAVE_TAU "@GINKGO_HAVE_TAU@")
set(GINKGO_HAVE_VTUNE "@GINKGO_HAVE_VTUNE@")
set(GINKGO_HAVE_METIS "@GINKGO_HAVE_METIS@")
set_and_check(VTune_PATH "@VTune_PATH@")

# ensure Threads settings 
set(THREADS_PREFER_PTHREAD_FLAG ON)

# NOTE: we do not export benchmarks, examples, tests or devel tools
#     so `third_party` libraries are currently unneeded.

include(CMakeFindDependencyMacro)
if(GINKGO_HAVE_PAPI_SDE)
    find_dependency(PAPI 7.0.1.0 COMPONENTS sde)
endif()

if(GINKGO_HAVE_HWLOC)
    find_dependency(HWLOC)
endif()

# Check for MPI if it is enabled
if(GINKGO_BUILD_MPI)
    find_dependency(MPI 3.1 COMPONENTS CXX)
endif()

# HIP and OpenMP depend on Threads::Threads in some circumstances, but don't find it
if (GINKGO_BUILD_HIP OR GINKGO_BUILD_OMP)
    find_dependency(Threads)
endif()

# Needed because of a known issue with CUDA while linking statically.
# For details, see https://gitlab.kitware.com/cmake/cmake/issues/18614
if((NOT GINKGO_BUILD_SHARED_LIBS) AND GINKGO_BUILD_CUDA)
    enable_language(CUDA)
    find_dependency(CUDAToolkit)
    find_dependency(NVTX)
endif()

if((NOT GINKGO_BUILD_SHARED_LIBS) AND GINKGO_BUILD_HIP)
    find_dependency(HIP)
    find_dependency(hipblas)
    find_dependency(hipfft)
    find_dependency(hiprand)
    find_dependency(hipsparse)
    find_dependency(rocrand)
    set_and_check(ROCTRACER_PATH "@ROCTRACER_PATH@")
    find_dependency(ROCTX)
endif()

if((NOT GINKGO_BUILD_SHARED_LIBS) AND GINKGO_BUILD_SYCL)
    find_dependency(MKL CONFIG HINTS "${GINKGO_MKL_ROOT}")
    find_dependency(oneDPL HINTS "${GINKGO_DPL_ROOT}")
endif()

if(GINKGO_HAVE_VTUNE)
    find_dependency(VTune)
endif()

if((NOT GINKGO_BUILD_SHARED_LIBS) AND GINKGO_HAVE_METIS)
    find_dependency(METIS)
endif()

if((NOT GINKGO_BUILD_SHARED_LIBS) AND GINKGO_HAVE_TAU)
    find_dependency(PerfStubs)
endif()

# Check that the same compilers as for Ginkgo are used
function(_ginkgo_check_compiler lang)
    if(DEFINED CMAKE_${lang}_COMPILER AND (NOT "${CMAKE_${lang}_COMPILER}" STREQUAL "${GINKGO_${lang}_COMPILER}"))
        set(_compiler_short "${CMAKE_${lang}_COMPILER_ID}:${CMAKE_${lang}_COMPILER_VERSION}")
        if(NOT "${_compiler_short}" STREQUAL "${GINKGO_${lang}_COMPILER_SHORT}")
            message(WARNING "The currently used ${lang} compiler: ${CMAKE_${lang}_COMPILER} does not match the compiler used to "
                            "build Ginkgo: ${GINKGO_${lang}_COMPILER}. It is encouraged to use the same compiler as Ginkgo to prevent ABI mismatch.")
        endif()
    endif()
endfunction()
_ginkgo_check_compiler(CXX)
if(GINKGO_BUILD_CUDA)
    _ginkgo_check_compiler(CUDA)
    _ginkgo_check_compiler(CUDA_HOST)
endif()

include(${CMAKE_CURRENT_LIST_DIR}/GinkgoTargets.cmake)

check_required_components(Ginkgo)
