macro(ginkgo_enable_kokkos_language)
    find_package(Kokkos REQUIRED)
    set(__device_enabled OFF)
    if (Kokkos_ENABLE_CUDA)
        enable_language(CUDA)
        set(__device_enabled ON)
    endif ()
    if (Kokkos_ENABLE_HIP)
        if (__device_enabled)
            message(FATAL_ERROR "Could not enable HIP language because CUDA language is already enabled.")
        endif ()
        enable_language(HIP)
        set(__device_enabled ON)
    endif ()
    if (Kokkos_ENABLE_SYCL)
        if (__device_enabled)
            message(FATAL_ERROR "Could not enable SYCL language because CUDA or HIP language is already enabled.")
        endif ()
        set(__device_enabled ON)
    endif ()
endmacro()


function(ginkgo_internal_setup_kokkos target sources)
    find_package(Kokkos REQUIRED)
    target_link_libraries(${target} PRIVATE Ginkgo::ginkgo Kokkos::kokkos)
    set_target_properties(${target} PROPERTIES CXX_COMPILER_LAUNCHER "")
    if (Kokkos_ENABLE_HIP)
        find_package(hip REQUIRED)
        target_link_libraries(${target} PRIVATE hip::device)
        set_source_files_properties(${sources} PROPERTIES LANGUAGE HIP)
        if (NOT (DEFINED CMAKE_HIP_ARCHITECTURES AND CMAKE_HIP_ARCHITECTURES))
            if (DEFINED AMDGPU_TARGETS)
                set_source_files_properties(${sources} PROPERTIES HIP_ARCHITECTURES ${AMDGPU_TARGETS})
                set_target_properties(${target} PROPERTIES HIP_ARCHITECTURES ${AMDGPU_TARGETS})
            else ()
                message(WARNING
                        "Could not determine HIP architecture. It is likely that no device code was generated. "
                        "Please set CMAKE_HIP_ARCHITECTURES accordingly to fix this.")
            endif ()
        endif ()
    endif ()
    if (Kokkos_ENABLE_CUDA)
        set_target_properties(${target} PROPERTIES CUDA_ARCHITECTURES ${CMAKE_CUDA_ARCHITECTURES})
    endif ()
    if (Kokkos_ENABLE_SYCL)
        # something
    endif ()
    if (Kokkos_ENABLE_OPENMP)
        find_package(OpenMP REQUIRED)
        target_link_libraries(${target} PRIVATE OpenMP::OpenMP_CXX)
    endif ()
endfunction()


function(ginkgo_add_kokkos_executable target sources)
    add_executable(${target} ${sources})
    ginkgo_internal_setup_kokkos(${target} ${sources})
endfunction()


function(ginkgo_add_kokkos_library target sources)
    add_library(${target} ${sources})
    ginkgo_internal_setup_kokkos(${target} ${sources})
endfunction()
