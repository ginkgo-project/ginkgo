// SPDX-FileCopyrightText: 2017 - 2024 The Ginkgo authors
//
// SPDX-License-Identifier: BSD-3-Clause

// total matrix dimensions
param M: u32;
param grid_size: u16;

// Colors
const send_row_signal_color: color = @get_color(0);
const horizontal_elimination_color: color = @get_color(1);
const division_color: color = @get_color(2);
const vertical_elimination_color: color = @get_color(3);
const LAUNCH: color = @get_color(8); // Color used by memcpy for kernel launch


// Task IDs
const send_row_to_south_task_id: data_task_id = @get_data_task_id(send_row_signal_color);
const division_step_task_id: data_task_id = @get_data_task_id(division_color);


const memcpy = @import_module("<memcpy/get_params>", .{
  .width = grid_size,
  .height = grid_size,
  .LAUNCH = LAUNCH
});

layout {
  // PE coordinates are (column, row)
  @set_rectangle(grid_size, grid_size);
  const M_per_pe: u16 = @as(u16, M/@as(u32, grid_size));

  const switch_TX_S = .{.pos1 = .{ .tx = SOUTH}, .ring_mode = true, .current_switch_pos = 1};
  const switch_TX_E = .{.pos1 = .{ .tx = EAST}, .ring_mode = true, .current_switch_pos = 1};

  for (@range(u16, grid_size)) |pe_x| {
    for (@range(u16, grid_size)) |pe_y| {
      @set_tile_code(pe_x, pe_y, "pe_program.csl", .{
        .memcpy_params = memcpy.get_params(pe_x),
        .M = M,
        .N = M,
        .M_per_pe = M_per_pe,
        .N_per_pe = M_per_pe,
        .grid_size = grid_size,
        .send_row_signal_color = send_row_signal_color,
        .horizontal_elimination_color = horizontal_elimination_color,
        .division_color = division_color,
        .vertical_elimination_color = vertical_elimination_color,
        .send_row_to_south_task_id = send_row_to_south_task_id,
        .division_step_task_id = division_step_task_id
      });
      const RX_W_TX_RE_or_R = .{ .rx = .{WEST}, .tx = if (pe_x < grid_size - 1) .{RAMP, EAST} else .{RAMP}};
      const RX_N_TX_RS_or_R = .{ .rx = .{NORTH}, .tx = if (pe_y < grid_size - 1) .{RAMP, SOUTH} else .{RAMP}};
      const RX_RW_TX_RE_or_R = .{ .rx = .{RAMP, WEST}, .tx = if (pe_x < grid_size - 1) .{RAMP, EAST} else .{RAMP}};
      const RX_RN_TX_RS_or_R = .{ .rx = .{RAMP, NORTH}, .tx = if (pe_y < grid_size - 1) .{RAMP, SOUTH} else .{RAMP}};

      if (pe_x == pe_y) {
        @set_color_config(pe_x, pe_y, send_row_signal_color, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST}}});
        @set_color_config(pe_x, pe_y, division_color, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH}}});
        if (pe_x == 0) {
          @set_color_config(pe_x, pe_y, horizontal_elimination_color, .{.routes = .{ .rx = .{RAMP}, .tx = .{EAST}}});
          @set_color_config(pe_x, pe_y, vertical_elimination_color, .{.routes = .{ .rx = .{RAMP}, .tx = .{SOUTH}}});
        }
        else if (pe_x == grid_size - 1) {
          @set_color_config(pe_x, pe_y, horizontal_elimination_color,.{.routes = RX_RW_TX_RE_or_R});
          @set_color_config(pe_x, pe_y, vertical_elimination_color, .{.routes = RX_RN_TX_RS_or_R});
        }
        else {
          @set_color_config(pe_x, pe_y, horizontal_elimination_color,.{
            .routes = RX_RW_TX_RE_or_R,
            .switches = switch_TX_E
          });
          @set_color_config(pe_x, pe_y, vertical_elimination_color, .{
            .routes = RX_RN_TX_RS_or_R,
            .switches = switch_TX_S
            });
        }
      }
      else if ( pe_x < pe_y) {
        @set_color_config(pe_x, pe_y, division_color, .{.routes = RX_N_TX_RS_or_R});
        if (pe_x == 0) {
          @set_color_config(pe_x, pe_y, horizontal_elimination_color, .{
            .routes = .{.rx = .{RAMP}, .tx = .{EAST}}
          });
        }
        else {
          @set_color_config(pe_x, pe_y, horizontal_elimination_color, .{
            .routes = RX_RW_TX_RE_or_R,
            .switches = switch_TX_E
          });
        }
        @set_color_config(pe_x, pe_y, vertical_elimination_color, .{.routes = RX_N_TX_RS_or_R});
      }
      else {
        @set_color_config(pe_x, pe_y, send_row_signal_color, .{.routes = RX_W_TX_RE_or_R});
        @set_color_config(pe_x, pe_y, horizontal_elimination_color, .{.routes = RX_W_TX_RE_or_R});
        if (pe_y == 0) {
          @set_color_config(pe_x, pe_y, vertical_elimination_color, .{
            .routes = .{.rx = .{RAMP}, .tx = .{SOUTH}}
          });
        }
        else {
          @set_color_config(pe_x, pe_y, vertical_elimination_color, .{
            .routes = RX_RN_TX_RS_or_R,
            .switches = switch_TX_S
          });
        }
      }
    }
  }

  // export symbol names
  @export_name("A", [*]f32, true);
  @export_name("start", fn()void);
}
