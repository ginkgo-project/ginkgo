// SPDX-FileCopyrightText: 2017 - 2024 The Ginkgo authors
//
// SPDX-License-Identifier: BSD-3-Clause

param memcpy_params: comptime_struct;

// Matrix dimensions
param M: u16;
param N: u16;
param M_per_pe: u16;
param N_per_pe: u16;
param grid_size: u16;

// Colors
param send_row_signal_color: color; // sends data horizontally from diagonal to the row, to indicate that sends their values to south for elimination step
param horizontal_elimination_color: color; // sends data horizontally used for the elimination step
param division_color: color; // sends data vertically to do the division step
param vertical_elimination_color: color; // sends data vertically used for the elimination step

// Tasks IDs
param send_row_to_south_task_id: data_task_id;
param division_step_task_id: data_task_id;
const compute_task_id: local_task_id = @get_local_task_id(10);

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);
const layout_mod = @import_module("<layout>");

var A: [M_per_pe*N_per_pe]f32;
var A_ptr: [*]f32 = &A;

var row_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{N_per_pe} -> A[i]});
var col_dsd = @get_dsd(mem1d_dsd, .{.tensor_access = |i|{M_per_pe} -> A[i*@as(i16, N_per_pe)]});

const opcode_switch_advance = 1;

fn ctrl(ce_filter: bool, opcode: i16, color_id: u16) u32 {
  return @as(u32, color_id) << 16 | @as(u32, opcode) << 22 | @as(u32, ce_filter) << 24;
}

fn is_right_col() bool {
  return(layout_mod.get_x_coord() == grid_size-1);
}

fn is_left_col() bool {
  return(layout_mod.get_x_coord() == 0);
}

fn is_top_row() bool {
  return(layout_mod.get_y_coord() == 0);
}

fn is_bottom_row() bool {
  return(layout_mod.get_y_coord() == grid_size-1);
}

fn is_over_diagonal_element() bool {
  return(layout_mod.get_x_coord() > layout_mod.get_y_coord());
}

fn is_diagonal_element() bool {
  return(layout_mod.get_x_coord() == layout_mod.get_y_coord());
}

fn is_under_diagonal_element() bool {
  return(layout_mod.get_x_coord() < layout_mod.get_y_coord());
}

var out_dsd_south_elimination = @get_dsd(fabout_dsd, .{
                      .fabric_color = vertical_elimination_color, .extent = N_per_pe,
                      .output_queue = @get_output_queue(0)
                    });
var out_dsd_south_elimination_control = @get_dsd(fabout_dsd, .{
                      .fabric_color = vertical_elimination_color, .extent = 1,
                      .output_queue = @get_output_queue(0),
                      .control = true
                    });

const out_dsd_south_division = @get_dsd(fabout_dsd, .{
                      .fabric_color = division_color, .extent = 1,
                      .output_queue = @get_output_queue(1)
                    });

const out_dsd_east_signal = @get_dsd(fabout_dsd, .{
                      .fabric_color = send_row_signal_color, .extent = 1,
                      .output_queue = @get_output_queue(2)
                    });

var out_dsd_east_elimination = @get_dsd(fabout_dsd, .{
                      .fabric_color = horizontal_elimination_color, .extent = M_per_pe,
                      .output_queue = @get_output_queue(3)
                    });
var out_dsd_east_elimination_control = @get_dsd(fabout_dsd, .{
                      .fabric_color = horizontal_elimination_color, .extent = 1,
                      .output_queue = @get_output_queue(3),
                      .control = true
                    });

var in_dsd_north_elimination = @get_dsd(fabin_dsd, .{
                      .fabric_color = vertical_elimination_color, .extent = N_per_pe,
                      .input_queue = @get_input_queue(0)
                    });

var in_dsd_west_elimination = @get_dsd(fabin_dsd, .{
                      .fabric_color = horizontal_elimination_color, .extent = M_per_pe,
                      .input_queue = @get_input_queue(3)
                    });

var elimination_count: u16 = 0;
var count: u16;
var to_add: [N_per_pe]f32;
var to_add_dsd =  @get_dsd(mem1d_dsd, .{.tensor_access = |i|{N_per_pe} -> to_add[i]});
var north_recvd_row: [N_per_pe]f32;
var north_recvd_row_dsd =  @get_dsd(mem1d_dsd, .{.tensor_access = |i|{N_per_pe} -> north_recvd_row[i]});
var east_recvd_col: [M_per_pe]f32;
var east_recvd_col_dsd =  @get_dsd(mem1d_dsd, .{.tensor_access = |i|{M_per_pe} -> east_recvd_col[i]});

fn update_sub_matrix(update_size: u16, start_row: u16, column_values: [*]f32, stride: u16, displacement: u16, row_values_dsd: mem1d_dsd, advance_aux: bool) void {
  to_add_dsd = @set_dsd_length(to_add_dsd, update_size);
  var aux_row_dsd = @increment_dsd_offset(row_dsd, 0, f32);
  if (advance_aux) {
    aux_row_dsd = @increment_dsd_offset(aux_row_dsd, N_per_pe, f32);
  }
  for (@range(u16, start_row, M_per_pe, 1)) |i| {
    @fmacs(aux_row_dsd, aux_row_dsd, row_values_dsd, -(column_values[i*stride + displacement]));
    aux_row_dsd = @increment_dsd_offset(aux_row_dsd, N_per_pe, f32);
  }
}

task compute() void {
  for (@range(u16, N_per_pe)) |col| {
    row_dsd = @set_dsd_length(row_dsd, N_per_pe - count);
    row_dsd = @increment_dsd_offset(row_dsd, 1, f32);
    if (!is_bottom_row()) {
      @fmovs(out_dsd_south_division, A[col*N_per_pe + col]);
      out_dsd_south_elimination = @set_dsd_length(out_dsd_south_elimination, N_per_pe - count);
      @fmovs(out_dsd_south_elimination, row_dsd);
    }
    for(@range(u16, count, M_per_pe, 1)) |row| {
      A[row*N_per_pe + col] /= A[col*N_per_pe + col];
    }
    col_dsd = @set_dsd_length(col_dsd, M_per_pe - count);
    col_dsd = @increment_dsd_offset(col_dsd, N_per_pe, f32);
    if (!is_right_col()) {
      @fmovs(out_dsd_east_signal, 0.0);
      out_dsd_east_elimination = @set_dsd_length(out_dsd_east_elimination, M_per_pe - count);
      @fmovs(out_dsd_east_elimination, col_dsd);
    }
    update_sub_matrix(N_per_pe - count, count, A_ptr, N_per_pe, col, row_dsd, true);
    count += 1;
    row_dsd = @increment_dsd_offset(row_dsd, N_per_pe, f32);
    col_dsd = @increment_dsd_offset(col_dsd, 1, f32);
  }
  sys_mod.unblock_cmd_stream();
}

fn elimination_step() void {
  for (@range(u16, if (is_over_diagonal_element()) layout_mod.get_y_coord() else layout_mod.get_x_coord())) |i| {
    if (layout_mod.get_x_coord() == i + 1) {
      @mov32(out_dsd_east_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(horizontal_elimination_color)));
    }
    if (layout_mod.get_y_coord() == i + 1) {
      @mov32(out_dsd_south_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(vertical_elimination_color)));
    }
    for (@range(u16, M_per_pe)) |j| {
      @fmovs(east_recvd_col_dsd, in_dsd_west_elimination);
      @fmovs(north_recvd_row_dsd, in_dsd_north_elimination);
      update_sub_matrix(N_per_pe, 0, &east_recvd_col, 1, 0, north_recvd_row_dsd, false);
    }
  }
  if (is_diagonal_element() and !is_bottom_row()) {
    @mov32(out_dsd_east_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(horizontal_elimination_color)));
    @mov32(out_dsd_south_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(vertical_elimination_color)));
  }
  else if (is_over_diagonal_element()) {
    @mov32(out_dsd_south_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(vertical_elimination_color)));
  }
  else {
    @mov32(out_dsd_east_elimination_control, comptime ctrl(true, opcode_switch_advance, @get_int(horizontal_elimination_color)));
  }

  if (is_diagonal_element()) {
    count = 1;
    @activate(compute_task_id);
  }
  else if (is_over_diagonal_element()) {
    count = 0;
  }
}

task division_step (value: f32) void {
  @block(division_step_task_id);
  north_recvd_row_dsd = @set_dsd_length(north_recvd_row_dsd, N_per_pe - count - 1);
  for(@range(u16, 0, M_per_pe, 1)) |row| {
    A[row*N_per_pe + count] /= value;
  }
  count += 1;
  in_dsd_north_elimination = @set_dsd_length(in_dsd_north_elimination, N_per_pe-count);
  @fmovs(north_recvd_row_dsd, in_dsd_north_elimination);
  @fmovs(out_dsd_east_elimination, col_dsd);
  col_dsd = @increment_dsd_offset(col_dsd, 1, f32);
  // elimination step
  if (count < N_per_pe) {
    row_dsd = @set_dsd_length(row_dsd, N_per_pe - count);
    row_dsd = @increment_dsd_offset(row_dsd, 1, f32);
    update_sub_matrix(N_per_pe - count, 0, A_ptr, N_per_pe, count - 1, north_recvd_row_dsd, false);
  }
  @unblock(division_step_task_id);
}

task send_row_to_south(signal: f32) void {
  @block(send_row_to_south_task_id);
  count += 1;
  east_recvd_col_dsd = @set_dsd_length(east_recvd_col_dsd, M_per_pe - count);
  east_recvd_col_dsd =  @increment_dsd_offset(east_recvd_col_dsd, 1, f32);
  in_dsd_west_elimination = @set_dsd_length(in_dsd_west_elimination, N_per_pe - count);
  @fmovs(east_recvd_col_dsd, in_dsd_west_elimination);
  @fmovs(out_dsd_south_elimination, row_dsd);
  // elimination step
  if (count < M_per_pe) {
    update_sub_matrix(N_per_pe, count, &east_recvd_col, 1, 0, row_dsd, true);
    row_dsd = @increment_dsd_offset(row_dsd, N_per_pe, f32);
    @unblock(send_row_to_south_task_id);
  } else {
    sys_mod.unblock_cmd_stream();
  }
}

fn start() void {
  if (is_diagonal_element() and layout_mod.get_y_coord() == 0) {
    count = 1;
    @activate(compute_task_id);
  }
  else if (is_left_col()) {
    count = 0;
  }
  else if (is_top_row()) {
    count = 0;
  }
  else {
    count = 0;
    elimination_step();
  }
  sys_mod.unblock_cmd_stream();
}

comptime {
  @bind_data_task(send_row_to_south, send_row_to_south_task_id);
  @bind_data_task(division_step, division_step_task_id);
  @bind_local_task(compute, compute_task_id);
  @export_symbol(A_ptr, "A");
  @export_symbol(start);
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}
