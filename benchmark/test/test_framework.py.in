#!/usr/bin/env python3
import subprocess
import difflib
import json
from typing import List, Tuple
import re
import pathlib
import sys

sourcepath = pathlib.Path("@CMAKE_CURRENT_SOURCE_DIR@")
binpath = pathlib.Path("@PROJECT_BINARY_DIR@")
matrixpath = pathlib.Path("@PROJECT_BINARY_DIR@/matrices/test/ani1.mtx")
generate = False
if len(sys.argv) > 2 and sys.argv[2] == "--generate":
    generate = True
denumberify_paths = [
    "time",
    "bandwidth",
    "flops",
    "components",
    "residual_norm",
    "rhs_norm",
    "max_relative_norm2",
]
detypenameify_key_starts = ["generate(", "apply(", "advanced_apply(", "copy(", "check("]
empty_string_paths = ["filename"]
empty_array_paths = [
    "recurrent_residuals",
    "true_residuals",
    "implicit_residuals",
    "iteration_timestamps",
]


def sanitize_json_key(key: str):
    """Applies sanitation to a single key.

    Strings that start with a name in detypenameify_key_starts will be truncated
    """

    for start in detypenameify_key_starts:
        if key.startswith(start):
            return start + "<typename>)"
    return key


def sanitize_json_value(key: str, value, sanitize_all: bool):
    """Applies sanitation to a single key-value pair.

    Strings with a key in empty_string_paths will be emptied
    Numbers with a key in denumberify_paths will be set to 1.0
    """

    if key in empty_string_paths and isinstance(value, str):
        return ""
    if key in denumberify_paths and isinstance(value, float):
        return 1.0
    if key in denumberify_paths and isinstance(value, dict):
        return sanitize_json(value, True)
    if key in empty_array_paths and isinstance(value, list):
        return []
    return sanitize_json(value, sanitize_all)


def sanitize_json(parsed_input, sanitize_all: bool = False):
    """Removes non-deterministic parts of a parsed JSON input.

    If sanitize_all is set to True, all nested float values will be set to 0.
    Otherwise, only JSON object entries will be sanitized
    using sanitize_json_key_value.
    """

    if isinstance(parsed_input, dict):
        return {
            sanitize_json_key(key): sanitize_json_value(key, value, sanitize_all)
            for key, value in parsed_input.items()
        }
    elif isinstance(parsed_input, list):
        return [sanitize_json(e, sanitize_all) for e in parsed_input]
    elif sanitize_all and isinstance(parsed_input, float):
        return 1.0
    else:
        return parsed_input


def sanitize_json_text(input: str) -> List[str]:
    """Sanitizes the given input JSON string.

    The JSON values will be parsed and sanitized through sanitize_json(...)
    and pretty-printed to replace the original JSON input.
    """

    result = json.dumps(sanitize_json(json.loads(input)), indent=4)
    # json.dumps doesn't add a trailing newline
    return result.splitlines() + [""]


def sanitize_text(
    input: str,
    ignore_patterns: List[str],
    replace_patterns: List[Tuple[str, str]],
) -> List[str]:
    """Sanitizes the given input string.

    Every input line matching an entry from ignore_patterns will be removed.
    Every line matching the first string in an entry from replace_patterns
    will be replaced by the second string.
    The output is guaranteed to end with an empty line.
    """

    lines = input.splitlines()
    output_lines = []
    patterns = [re.compile(pattern) for pattern in ignore_patterns]
    for line in lines:
        for pattern, replacement in replace_patterns:
            line = re.sub(pattern, replacement, line)
        keep = True
        for compiled_pattern in patterns:
            if re.match(compiled_pattern, line):
                keep = False
                break
        if keep:
            output_lines.append(line)
    if len(output_lines) == 0 or output_lines[-1] != "":
        output_lines.append("")
    return output_lines


def compare_output_impl(
    args: List[str],
    expected_stdout: str,
    expected_stderr: str,
    stdin: str,
    launcher_flags: List[str],
):
    args = [sys.argv[1]] + args
    expected_stdout = str(sourcepath / "reference" / expected_stdout)
    expected_stderr = str(sourcepath / "reference" / expected_stderr)
    result = subprocess.run(
        args=launcher_flags + args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        input=bytes(stdin, "utf-8"),
    )
    print(
        "TEST: {}".format(
            " ".join(["'{}'".format(arg) for arg in launcher_flags + args])
        )
    )
    ignore_patterns = [
        "This is Ginkgo",  # version numbers + tag
        "    the .* module is",  # version numbers + tag
        "    running with core module",  # version numbers + tag
        "DEBUG: (begin|end  ) (allocate|free)",  # allocations
    ]
    typename_patterns = [
        ("(apply|generate|check|copy|move)\([^())]*\)", "\\1(<typename>)"),
        ("what\\(\\): .*", "what(): <removed>"),
        (re.escape(str(matrixpath)), "<filename>"),
    ]
    if generate:
        open(expected_stdout, "w").write(
            "\n".join(sanitize_json_text(result.stdout.decode()))
        )
        open(expected_stderr, "w").write(
            "\n".join(
                sanitize_text(
                    result.stderr.decode(),
                    ignore_patterns=ignore_patterns,
                    replace_patterns=typename_patterns,
                )
            )
        )
        print("GENERATED")
        return
    result_stdout_processed = sanitize_json_text(result.stdout.decode())
    result_stderr_processed = sanitize_text(
        result.stderr.decode(),
        ignore_patterns=ignore_patterns,
        replace_patterns=typename_patterns,
    )
    expected_stdout_processed = sanitize_json_text(open(expected_stdout).read())
    expected_stderr_processed = sanitize_text(
        open(expected_stderr).read(),
        ignore_patterns=ignore_patterns,
        replace_patterns=typename_patterns,
    )
    failed = False
    if result_stdout_processed != expected_stdout_processed:
        print("FAIL: stdout differs")
        print(
            "\n".join(
                difflib.unified_diff(expected_stdout_processed, result_stdout_processed)
            )
        )
        failed = True
    if result_stderr_processed != expected_stderr_processed:
        print("FAIL: stderr differs")
        print(
            "\n".join(
                difflib.unified_diff(expected_stderr_processed, result_stderr_processed)
            )
        )
        failed = True
    if failed:
        exit(1)
    print("PASS")


def compare_output(
    args: List[str], expected_stdout: str, expected_stderr: str, stdin: str = ""
):
    compare_output_impl(
        args,
        expected_stdout=expected_stdout,
        expected_stderr=expected_stderr,
        stdin=stdin,
        launcher_flags=[],
    )


def compare_output_distributed(
    args, expected_stdout, expected_stderr, num_procs, stdin=""
):
    compare_output_impl(
        args,
        expected_stdout,
        expected_stderr,
        stdin,
        ["@MPIEXEC_EXECUTABLE@", "@MPIEXEC_NUMPROC_FLAG@", str(num_procs)],
    )
