if(GINKGO_BUILD_CUDA AND GINKGO_BUILD_HIP)
    message(FATAL_ERROR "gpubench doesn't support CUDA and HIP at the same time")
endif()
if(NOT (GINKGO_BUILD_CUDA OR GINKGO_BUILD_HIP))
    message(FATAL_ERROR "gpubench only supports CUDA or HIP")
endif()
if(GINKGO_BUILD_CUDA)
    set(GPU_LANG CUDA)
    set(USE_HIP OFF)
else()
    set(GPU_LANG HIP)
    set(USE_HIP ON)
endif()
message(STATUS "Fetching external gpubench")
include(FetchContent)
FetchContent_Declare(
    gpubench
    GIT_REPOSITORY https://github.com/upsj/gpubench.git
    GIT_TAG        0a5ebdc5aedd3fe5be6b5defeedd35bf43efd231
)
FetchContent_GetProperties(gpubench)
if(NOT gpubench_POPULATED)
    FetchContent_Populate(gpubench)
    add_subdirectory(${gpubench_SOURCE_DIR} ${gpubench_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

function(add_benchmark name)
    set(targetname ${name}-microbench)
    string(TOLOWER ${GPU_LANG} GPU_LANG_LOWER)
    add_executable(${targetname} ${name}.gpu.cpp)
    set_source_files_properties(${name}.gpu.cpp PROPERTIES LANGUAGE ${GPU_LANG})
    target_link_libraries(${targetname} PRIVATE nvbench::main ginkgo)
    target_include_directories(${targetname} PRIVATE ${PROJECT_SOURCE_DIR})
    target_compile_options(${targetname} PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:--extended-lambda> -lineinfo)
    target_compile_definitions(${targetname} PRIVATE GKO_COMPILING_${GPU_LANG} GKO_DEVICE_NAMESPACE=${GPU_LANG_LOWER})    
endfunction(add_benchmark name)

add_benchmark(memory)
add_benchmark(sorting)
add_benchmark(bitvector)
