/*******************************<GINKGO LICENSE>******************************
Copyright (c) 2017-2021, the Ginkgo authors
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************<GINKGO LICENSE>*******************************/


/**
 * @page Examples Example programs
 *
 * Here you can find example programs that demonstrate the usage of Ginkgo.
 * Some examples are built on one another and some are stand-alone and
 * demonstrate a concept of
 * Ginkgo, which can be used in your own code.
 *
 * You can browse the available example programs
 * <ol>
 *   <li> as <b><a href="#graph">a graph</a></b> that shows how example programs
 *     build upon each other.
 *   <li> as <b><a href="#list">a list</a></b> that provides a short
 *     synopsis of each program.
 *   <li> or <b><a href="#topic">grouped by topic</a></b>.
 * </ol>
 *
 * By default, all Ginkgo examples are built using CMake.
 *
 * An example for building the examples and using Ginkgo as an external library
 * without CMake can be found in the script provided for each example, which
 * should be called with the form:
 * <code>./build.sh PATH_TO_GINKGO_BUILD_DIR </code>
 *
 * By default, Ginkgo is compiled with at least
 * <code>-DGINKGO_BUILD_REFERENCE=ON</code>.
 * Ginkgo also tries to detect your environment setup (presence of CUDA, ...) to
 * enable the relevant accelerator modules. If you want to target a specific
 * GPU, make sure that Ginkgo is compiled with the accelerator specific module
 * enabled, such as:
 * <ol>
 *   <li> <code>-DGINKGO_BUILD_CUDA=ON</code> option for NVIDIA GPUs.
 *   <li> <code>-DGINKGO_BUILD_HIP=ON</code> option for AMD or NVIDIA GPUs.
 *   <li> <code>-DGINKGO_BUILD_DPCPP=ON</code> option for Intel GPUs (and
 *        possibly any other platform).
 * </ol
 *
 * <a name="graph"></a>
 * @anchor ExampleConnectionGraph
 * <h3>Connections between example programs</h3>
 *
 * The following graph shows the connections between example programs and
 * how they build on each other.
 * Click on any of the boxes to go to one of the programs. If you hover
 * your mouse pointer over a box, a brief description of the program
 * should appear.
 * @dot
@@EXAMPLE_MAP@@
 * @enddot
 *
 * <b>Legend:</b><br />
 * @dot
@@EXAMPLE_LEGEND@@
 * @enddot
 *
 * <a name="list"></a>
 * <h3>Example programs </h3>
 *
 * <table align="center" width="90%">
 *   <tr valign="top">
 *       <td width="260px">@ref simple_solver</td>
 *       <td> A minimal CG solver in Ginkgo, which reads a matrix from a file.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref minimal_cuda_solver</td>
 *       <td> A minimal solver on the CUDA executor than can be run on NVIDIA
 *            GPU's.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref poisson_solver</td>
 *       <td> Solve an actual physically relevant problem, the poisson problem.
 *            The matrix is generated within Ginkgo.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref preconditioned_solver</td>
 *       <td> Using a Jacobi preconditioner to solve a linear system.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref ilu_preconditioned_solver</td>
 *       <td> Using an ILU preconditioner to solve a linear system.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref performance_debugging</td>
 *       <td> Using Loggers to debug the performance within Ginkgo.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref three_pt_stencil_solver</td>
 *       <td> Using a three point stencil to solve the poisson equation with
 *            array views.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref nine_pt_stencil_solver</td>
 *       <td> Using a nine point 2D stencil to solve the poisson equation with
 *            array views.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref external_lib_interfacing</td>
 *       <td> Using Ginkgo's solver with the external library deal.II.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td width="260px">@ref custom_logger</td>
 *       <td> Creating a custom logger specifically for comparing the recurrent
 *            and the real residual norms.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref custom_matrix_format</td>
 *       <td> Creating a matrix-free stencil solver by using Ginkgo's advanced
 *            methods to build your own custom matrix format.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref inverse_iteration</td>
 *       <td> Using Ginkgo to compute eigenvalues of a matrix with the inverse
 *            iteration method.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref simple_solver_logging</td>
 *       <td> Using the logging functionality in Ginkgo to get solver and other
 *            information to diagnose and debug your code.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref papi_logging</td>
 *       <td> Using the PAPI logging library in Ginkgo to get advanced
 *            information about your code
 *        and its behaviour.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref ginkgo_overhead</td>
 *       <td> Measuring the overhead of the Ginkgo library.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref custom_stopping_criterion</td>
 *       <td> Creating a custom stopping criterion for the iterative solution
 *            process.
 *       </td></tr>
 *
 *   <tr valign="top">
 *       <td>@ref ginkgo_ranges</td>
 *       <td> Using the ranges concept to factorize a matrix with the LU
 *            factorization.
 *       </td></tr>
 *
 * </table>
 *
 * <a name="topic"></a>
 * <h3>Example programs grouped by topics</h3>
 *
 * <h4><b>Basic techniques</b></h4>
 * <table align="center" width="90%">
 *
 *   <tr valign="top">
 *     <td> Solving a simple linear system with choice of executors.
 *     </td>
 *     <td>@ref simple_solver
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Debug the performance of a solver using loggers.
 *     </td>
 *     <td>@ref performance_debugging
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using the CUDA executor
 *     </td>
 *     <td>@ref minimal_cuda_solver
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Using preconditioners
 *     </td>
 *     <td>@ref preconditioned_solver,
 *         @ref ilu_preconditioned_solver
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Solving a physically relevant problem
 *     </td>
 *     <td>@ref poisson_solver,
 *         @ref three_pt_stencil_solver,
 *         @ref nine_pt_stencil_solver,
 *         @ref custom_matrix_format
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Reading in a matrix and right hand side from a file.
 *     </td>
 *     <td>@ref simple_solver,
 *         @ref minimal_cuda_solver,
 *         @ref preconditioned_solver,
 *         @ref ilu_preconditioned_solver,
 *         @ref inverse_iteration,
 *         @ref simple_solver_logging,
 *         @ref papi_logging,
 *         @ref custom_stopping_criterion,
 *         @ref custom_logger
 *     </td>
 *   </tr>
 *
 * </table>
 *
 * <h4><b>Advanced techniques</b></h4>
 * <table align="center" width="90%">
 *
 *   <tr valign="top">
 *     <td> Using Ginkgo with external libraries.
 *     </td>
 *     <td>@ref external_lib_interfacing
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Customizing Ginkgo
 *     </td>
 *     <td>@ref custom_logger,
 *         @ref custom_stopping_criterion,
 *         @ref custom_matrix_format
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td width="400px"> Writing your own matrix format
 *     </td>
 *     <td>@ref custom_matrix_format
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using Ginkgo to construct more complex linear algebra routines.
 *     </td>
 *     <td> @ref inverse_iteration
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Logging within Ginkgo.
 *     </td>
 *     <td> @ref simple_solver_logging,
 *          @ref papi_logging,
 *          @ref custom_logger
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Constructing your own stopping criterion.
 *     </td>
 *     <td> @ref custom_stopping_criterion
 *     </td>
 *   </tr>
 *
 *   <tr valign="top">
 *     <td> Using ranges in Ginkgo.
 *     </td>
 *     <td> @ref ginkgo_ranges
 *     </td>
 *   </tr>
 * </table>
 */
