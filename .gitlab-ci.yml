stages:
  - init-status
  - sync
  - trigger_pipeline
  - build
  - test
  - code_quality
  - deploy
  - QoS_tools
  - on-failure
  - finalize-status
  - benchmark-build
  - benchmark-cuda
  - benchmark-omp
  - benchmark-reference

include:
  - local: '.gitlab/image.yml'
  - local: '.gitlab/rules.yml'
  - local: '.gitlab/scripts.yml'
  - local: '.gitlab/variables.yml'
  # This is a workaround to conditionally make the branch pipelines
  # interruptible, because the flag does not directly support rules [1].
  #
  # [1] https://gitlab.com/gitlab-org/gitlab/-/issues/194023#note_1225906002
  - local: '.gitlab/add-interrupt.yml'
    rules:
      - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+/


# Code analysis, coverage and reporting tool
# For short living branches or PRs, try to detect an open PR
sonarqube_cov_:
  stage: code_quality
  extends:
    - .default_variables
    - .quick_test_short_lived_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  script:
    - PR_ID=$(curl -s "https://api.github.com/search/issues?q=sha:${CI_COMMIT_SHA}"
      | jq '.items[0].number')
    - if [[ "${PR_ID}" != "null" ]]; then
        target_branch=$(curl -s
          "https://api.github.com/repos/ginkgo-project/ginkgo/pulls/${PR_ID}" | jq
          '.base.ref' | sed 's/"//g');
        sonar_branching="-Dsonar.pullrequest.branch=${CI_COMMIT_REF_NAME}
          -Dsonar.pullrequest.base=${target_branch}
          -Dsonar.pullrequest.key=${PR_ID}";
      else
        sonar_branching="-Dsonar.branch.name=${CI_COMMIT_REF_NAME}
        -Dsonar.branch.target=develop";
      fi
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=COVERAGE
      -DGINKGO_SONARQUBE_TEST=ON
    - sonar-scanner -Dsonar.login=${SONARQUBE_LOGIN}
      -Dsonar.cfamily.build-wrapper-output=build/bw-output
      -Dsonar.cfamily.gcov.reportsPath=build/Testing/CoverageInfo
      ${sonar_branching}
    - bash <(curl -s https://codecov.io/bash) -f "\!*examples*" -f "\!*third_party*" -f "\!*c\\+\\+*" -f "\!*benchmark*"
