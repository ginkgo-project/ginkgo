stages:
  - init-status
  - sync
  - trigger_pipeline
  - build
  - test
  - code_quality
  - deploy
  - QoS_tools
  - on-failure
  - finalize-status
  - benchmark-build
  - benchmark-cuda
  - benchmark-omp
  - benchmark-reference

include:
  - local: '.gitlab/image.yml'
  - local: '.gitlab/rules.yml'
  - local: '.gitlab/scripts.yml'
  - local: '.gitlab/variables.yml'
  # This is a workaround to conditionally make the branch pipelines
  # interruptible, because the flag does not directly support rules [1].
  #
  # [1] https://gitlab.com/gitlab-org/gitlab/-/issues/194023#note_1225906002
  - local: '.gitlab/add-interrupt.yml'
    rules:
      - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+/

sync:
  stage: sync
  extends:
    - .default_variables
    - .before_script_git_template
    - .use_status-job-settings
  variables:
    GIT_STRATEGY: none
    PRIVATE_REPO: git@gitlab.com:ginkgo-project/ginkgo.git
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
  script:
    - git clone ${PRIVATE_REPO} -b ${CI_COMMIT_REF_NAME} repo_sync
    - cd repo_sync
    - git pull --ff-only ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PRIVATE_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
  only:
    - master
    - develop

trigger_pipeline:
  stage: trigger_pipeline
  extends:
    - .default_variables
    - .pr_trigger_condition
    - .use_status-job-settings
  variables:
    STATUS_CONTEXT: "quick"
  script:
    - PR_ID=$(curl -s "https://api.github.com/search/issues?q=sha:${CI_COMMIT_SHA}"
      | jq '.items[0].number')
    - |
      if [[ "${PR_ID}" != "null" ]]; then
        echo "Finding the corresponding Pull Request - ${PR_ID}"
        echo "Checking whether the PR contains 1:ST:ready-to-merge, 1:ST:run-full-test, or 1:ST:skip-full-test labels"
        PR_CONTENT=$(curl -X GET -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${BOT_STATUS_TOKEN}" \
          "https://api.github.com/repos/ginkgo-project/ginkgo/issues/${PR_ID}")
        SKIP_FULL_PIPELINE=$(echo "${PR_CONTENT}" | jq -r 'any( [.labels | .[] | .name ] | .[] ; . == "1:ST:skip-full-test")')
        ENABLE_FULL_PIPELINE=$(echo "${PR_CONTENT}" | jq -r \
          'any( [.labels | .[] | .name ] | .[] ; . == "1:ST:ready-to-merge" or . == "1:ST:run-full-test")')
        if [[ "${SKIP_FULL_PIPELINE}" == "true" ]]; then
          echo "Skipping the full pipeline and making the full pipeline succeed"
          curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${BOT_STATUS_TOKEN}" \
            https://api.github.com/repos/ginkgo-project/ginkgo/statuses/${CI_COMMIT_SHA} \
            -d "{\"state\":\"success\",\"context\":\"ci/gitlab/gitlab.com/trigger_pipeline\",\"target_url\":\"${CI_JOB_URL}\",\"description\":\"skipped full pipeline\"}"
          echo "If you want to run the full tests, remove 1:ST:skip-full-test and add 1:ST:ready-to-merge or 1:ST:run-full-test to the pull request. Then rerun this job or start a new pipeline."
        elif [[ "${ENABLE_FULL_PIPELINE}" == "true" ]]; then
          echo "Running full pipeline."
          curl -X POST -F token=${CI_JOB_TOKEN} -F "ref=${CI_COMMIT_REF_NAME}" -F "variables[STATUS_CONTEXT]=full" \
            https://gitlab.com/api/v4/projects/6431537/trigger/pipeline
          echo "If want to skip full pipeline, add 1:ST:skip-full-test. Rerun this job or start a new pipeline."
        else
          echo "Didn't find required labels, so we're making the full pipeline fail."
          curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${BOT_STATUS_TOKEN}" \
            https://api.github.com/repos/ginkgo-project/ginkgo/statuses/${CI_COMMIT_SHA} \
            -d "{\"state\":\"failure\",\"context\":\"ci/gitlab/gitlab.com/trigger_pipeline\",\"target_url\":\"${CI_JOB_URL}\",\"description\":\"no run/skip full pipeline\"}"
          echo "To skip the full pipeline for this pull request, rerun this job or start a new pipeline after adding the label 1:ST:skip-full-test."
          echo "To run the full pipeline for this pull request, rerun this job or start a new pipeline after adding one of the 1:ST:run-full-test or 1:ST:ready-to-merge labels."
        fi
      else
        echo "Can not find the corresponding Pull Request"
      fi


# Build jobs
# Job with example runs.
# cuda 10.1 and friends
# Build CUDA NVIDIA without omp
# Make sure that our jobs run when HWLOC is
# forcibly switched off
build/cuda101/nompi/clang/cuda_wo_omp/release/shared:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    CXX_COMPILER: "clang++"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    BUILD_HWLOC: "OFF"
    BUILD_TYPE: "Release"
    CUDA_ARCH: 35

# Job with example runs.
# Also explicitly test PAPI SDE
build/cuda101/openmpi/gcc/all/debug/shared:
  extends:
    - .build_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_MPI: "ON"
    MPI_AS_ROOT: "ON"
    BUILD_HIP: "ON"
    BUILD_TYPE: "Debug"
    BUILD_PAPI_SDE: "ON"
    RUN_EXAMPLES: "ON"
    CUDA_ARCH: 35

build/cuda101/nompi/clang/all/release/static:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"
    CUDA_ARCH: 35

# clang-cuda with cuda 10.1 and friends
#build/clang-cuda101/openmpi/clang/cuda/release/shared:
#  extends:
#    - .build_and_test_template
#    - .default_variables
#    - .quick_test_condition
#    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
#  variables:
#    CXX_COMPILER: "clang++"
#    CUDA_COMPILER: "clang++"
#    BUILD_OMP: "ON"
#    BUILD_CUDA: "ON"
#    BUILD_MPI: "ON"
#    MPI_AS_ROOT: "ON"
#    BUILD_HIP: "OFF"
#    BUILD_TYPE: "Release"


#build/clang-cuda101/nompi/clang/cuda/debug/static:
#  extends:
#    - .build_and_test_template
#    - .default_variables
#    - .full_test_condition
#    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
#  variables:
#    CXX_COMPILER: "clang++"
#    CUDA_COMPILER: "clang++"
#    BUILD_OMP: "ON"
#    BUILD_CUDA: "ON"
#    BUILD_TYPE: "Debug"
#    FAST_TESTS: "ON"
#    BUILD_SHARED_LIBS: "OFF"


# cuda 10.2 and friends

# works when there is no hwloc and tpl hwloc is also switched off.
build/cuda102/nompi/gcc/all/debug/shared:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda102-nompi-gnu8-llvm8-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    BUILD_HWLOC: "OFF"
    CUDA_ARCH: 35

# Use TPL hwloc when no system hwloc is available
build/cuda102/nompi/clang/all/release/static:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda102-nompi-gnu8-llvm8-intel2019
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"
    CUDA_ARCH: 35
    BUILD_HWLOC: "OFF"

build/cuda102/nompi/intel/cuda/debug/static:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda102-nompi-gnu8-llvm8-intel2019
  variables:
    CXX_COMPILER: "icpc"
    CXX_FLAGS: ""
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    BUILD_SHARED_LIBS: "OFF"
    CUDA_ARCH: 35
    BUILD_HWLOC: "OFF"

# cuda 11.0 and friends on HoreKa with tests
build/cuda110/mvapich2/gcc/cuda/debug/shared:
  extends:
    - .build_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_MPI: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    NONDEFAULT_STREAM: "ON"
    CUDA_ARCH: 80
    USE_NAME: "cuda110-mvapich2-gcc-${CI_PIPELINE_ID}"
    KEEP_CONTAINER: "ON"
    USE_SLURM: 0

test/cuda110/mvapich2/gcc/cuda/debug/shared:
  extends:
    - .horeka_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    USE_NAME: "cuda110-mvapich2-gcc-${CI_PIPELINE_ID}"
    SLURM_PARTITION: "accelerated"
    SLURM_GRES: "gpu:4"
    SLURM_TIME: "02:00:00"
  dependencies: null
  # FIXME: current slurm always reports failure even if all tests are passed.
  allow_failure: yes
  needs: [ "build/cuda110/mvapich2/gcc/cuda/debug/shared" ]


build/cuda110/nompi/clang/cuda/release/static:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"
    CUDA_ARCH: 80
    USE_NAME: "cuda110-nompi-clang-${CI_PIPELINE_ID}"
    KEEP_CONTAINER: "ON"
    USE_SLURM: 0

test/cuda110/nompi/clang/cuda/release/static:
  extends:
    - .horeka_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    USE_NAME: "cuda110-nompi-clang-${CI_PIPELINE_ID}"
    SLURM_PARTITION: "accelerated"
    SLURM_GRES: "gpu:4"
    SLURM_TIME: "01:30:00"
  dependencies: null
  # FIXME: current slurm always reports failure even if all tests are passed.
  allow_failure: yes
  needs: [ "build/cuda110/nompi/clang/cuda/release/static" ]


build/cuda110/nompi/intel/cuda/debug/static:
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    CXX_COMPILER: "icpc"
    CXX_FLAGS: ""
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    BUILD_SHARED_LIBS: "OFF"
    CUDA_ARCH: 80
    USE_NAME: "cuda110-nompi-intel-${CI_PIPELINE_ID}"
    KEEP_CONTAINER: "ON"
    USE_SLURM: 0

test/cuda110/nompi/intel/cuda/debug/static:
  extends:
    - .horeka_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
  variables:
    USE_NAME: "cuda110-nompi-intel-${CI_PIPELINE_ID}"
    SLURM_PARTITION: "accelerated"
    SLURM_GRES: "gpu:4"
    SLURM_TIME: "02:00:00"
  dependencies: null
  # FIXME: current slurm always reports failure even if all tests are passed.
  allow_failure: yes
  needs: [ "build/cuda110/nompi/intel/cuda/debug/static" ]


# cuda 11.4 and friends
build/cuda114/nompi/gcc/cuda/debug/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko_cuda114-openmpi-gnu10-llvm12
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    # fix gtest issue https://github.com/google/googletest/issues/3514
    CXX_FLAGS: "-Wno-error=maybe-uninitialized"
    # disable spurious unused argument warning
    EXTRA_CMAKE_FLAGS: "-DCMAKE_CUDA_FLAGS=-diag-suppress=177"


# nvhpc and friends
build/nvhpc233/cuda120/nompi/nvcpp/release/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko_nvhpc233-cuda120-openmpi-gnu12-llvm16
  variables:
    CXX_COMPILER: "nvc++"
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_MPI: "OFF"
    BUILD_TYPE: "Release"
    FAST_TESTS: "ON"
    BUILD_SHARED_LIBS: "OFF"
    # disable common gflags warnings
    CXX_FLAGS: "--diag_suppress=useless_using_declaration,declared_but_not_referenced"
    # disable spurious unused argument warning
    EXTRA_CMAKE_FLAGS: "-DCMAKE_CUDA_FLAGS=-diag-suppress=177"

build/nvhpc227/cuda117/nompi/nvcpp/debug/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko_nvhpc227-cuda117-openmpi-gnu11-llvm14
  variables:
    CXX_COMPILER: "nvc++"
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_MPI: "OFF"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    # disable common gflags warnings
    CXX_FLAGS: "--diag_suppress=useless_using_declaration,declared_but_not_referenced"
    # disable spurious unused argument warning
    EXTRA_CMAKE_FLAGS: "-DCMAKE_CUDA_FLAGS=-diag-suppress=177"

# ROCm 4.5 and friends
build/amd/nompi/gcc/rocm45/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-rocm45-nompi-gnu8-llvm8
  variables:
    BUILD_OMP: "ON"
    BUILD_HIP: "ON"
    NONDEFAULT_STREAM: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Release"
    BUILD_HWLOC: "OFF"

build/amd/nompi/clang/rocm45/release/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-rocm45-nompi-gnu8-llvm8
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_HIP: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"

build/amd/nompi/clang/rocm45/debug/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-rocm45-nompi-gnu8-llvm8
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_HIP: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Debug"

# ROCm 5.0.2 and friends
build/amd/nompi/gcc/rocm502/debug/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-rocm502-nompi-gnu11-llvm11
  variables:
    BUILD_OMP: "ON"
    BUILD_HIP: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Debug"
    BUILD_SHARED_LIBS: "OFF"

build/amd/nompi/clang/rocm502/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-rocm502-nompi-gnu11-llvm11
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_HIP: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Release"

# without omp
build/amd/nompi/gcc/rocm502_wo_omp/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-rocm502-nompi-gnu11-llvm11
  variables:
    BUILD_OMP: "OFF"
    BUILD_MPI: "OFF"
    BUILD_HIP: "ON"
    RUN_EXAMPLES: "ON"
    BUILD_TYPE: "Release"

# no cuda but latest gcc and clang
build/nocuda/nompi/gcc/core/debug/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    BUILD_SHARED_LIBS: "OFF"
    BUILD_HWLOC: "OFF"

build/nocuda/nompi/clang/core/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    CXX_COMPILER: "clang++"
    BUILD_TYPE: "Release"

build/nocuda/nompi/gcc/omp/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    BUILD_OMP: "ON"
    BUILD_TYPE: "Release"

build/nocuda/openmpi/clang/omp/debug/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-nocuda-openmpi-gnu9-llvm8
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    MPI_AS_ROOT: "ON"
    BUILD_MPI: "ON"
    BUILD_TYPE: "Debug"
    FAST_TESTS: "ON"
    BUILD_SHARED_LIBS: "OFF"

# nocuda with the oldest supported compiler
build/nocuda/nompi/gcc/omp/release/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-nocuda-mvapich2-gnu5-llvm39-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"

build/nocuda-nomixed/nompi/clang/omp/release/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-nocuda-mvapich2-gnu5-llvm39-intel2019
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OFF"
    MIXED_PRECISION: "OFF"

build/nocuda-nomixed/openmpi/gcc/omp/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    BUILD_MPI: "ON"
    MPI_AS_ROOT: "ON"
    BUILD_OMP: "ON"
    BUILD_TYPE: "Release"
    MIXED_PRECISION: "OFF"

build/nocuda-nomixed/nompi/clang/omp/debug/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    CXX_COMPILER: "clang++"
    BUILD_OMP: "ON"
    BUILD_TYPE: "Debug"
    BUILD_SHARED_LIBS: "OFF"
    MIXED_PRECISION: "OFF"

build/dpcpp/2022-1/cpu/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-oneapi-cpu
  variables:
    CXX_COMPILER: "dpcpp"
    CXX_FLAGS: "-Wpedantic -ffp-model=precise"
    BUILD_SYCL: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "ON"
    SYCL_DEVICE_FILTER: "*:cpu"
    SLURM_PARTITION: "cpu"
    SLURM_TIME: "2:00:00"
    BUILD_HWLOC: "OFF"
    # This job is not in exclusive mode

# It gives two available backends of GPU on tests
build/dpcpp/igpu/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-oneapi-igpu
  variables:
    CXX_COMPILER: "dpcpp"
    CXX_FLAGS: "-Wpedantic -ffp-model=precise"
    BUILD_SYCL: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "ON"
    DPCPP_SINGLE_MODE: "ON"
    ONEAPI_DEVICE_SELECTOR: "*:gpu"
    BUILD_HWLOC: "OFF"

# TODO: Enable when debug shared library size issues are fixed
# build/dpcpp/level_zero_igpu/debug/shared:
#   extends:
#     - .build_and_test_template
#     - .default_variables
#     - .full_test_condition
#     - .use_gko-oneapi-igpu
#   variables:
#     CXX_COMPILER: "dpcpp"
#     CXX_FLAGS: "-Wpedantic -ffp-model=precise"
#     BUILD_SYCL: "ON"
#     BUILD_TYPE: "Debug"
#     BUILD_SHARED_LIBS: "ON"
#     DPCPP_SINGLE_MODE: "ON"
#     ONEAPI_DEVICE_SELECTOR: "level_zero:gpu"

# It gives two available backends of GPU on tests
build/dpcpp/dgpu/release/static:
  extends:
    - .build_and_test_template
    - .default_variables
    - .full_test_condition
    - .use_gko-oneapi-igpu
  variables:
    CXX_COMPILER: "dpcpp"
    CXX_FLAGS: "-Wpedantic -ffp-model=precise"
    BUILD_SYCL: "ON"
    BUILD_TYPE: "Release"
    BUILD_SHARED_LIBS: "OF"
    DPCPP_SINGLE_MODE: "ON"
    ONEAPI_DEVICE_SELECTOR: "*:gpu"
    BUILD_HWLOC: "OFF"

build/dpcpp/level_zero_dgpu/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-oneapi-dgpu
  variables:
    CXX_COMPILER: "dpcpp"
    CXX_FLAGS: "-Wpedantic -ffp-model=precise"
    BUILD_SYCL: "ON"
    BUILD_TYPE: "Release"
    DPCPP_SINGLE_MODE: "ON"
    ONEAPI_DEVICE_SELECTOR: "level_zero:gpu"
    BUILD_HWLOC: "OFF"

build/icpx/level_zero_dgpu/release/shared:
  extends:
    - .build_and_test_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-oneapi-dgpu
  variables:
    CXX_COMPILER: "icpx"
    CXX_FLAGS: "-Wpedantic -ffp-model=precise"
    BUILD_SYCL: "ON"
    BUILD_TYPE: "Release"
    DPCPP_SINGLE_MODE: "ON"
    ONEAPI_DEVICE_SELECTOR: "level_zero:gpu"
    BUILD_HWLOC: "OFF"

# Job with important warnings as error
warnings:
  stage: code_quality
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    CXX_FLAGS: "-Werror=pedantic;-pedantic-errors"
  allow_failure: yes

# Ensure kernel modules do not depend on core
no-circular-deps:
  stage: code_quality
  extends:
    - .build_template
    - .default_variables
    - .quick_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    EXTRA_CMAKE_FLAGS: '-DGINKGO_CHECK_CIRCULAR_DEPS=on'
  allow_failure: no

# Ensure Ginkgo builds from a subdirectory
subdir-build:
  stage: code_quality
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-nocuda-nompi-gnu9-llvm8
  variables:
    BUILD_OMP: "ON"
    CI_PROJECT_PATH_SUFFIX: "/test_subdir"
  allow_failure: no

# Run clang-tidy and iwyu
clang-tidy:
  stage: code_quality
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_HIP: "ON"
    EXTRA_CMAKE_FLAGS: '-DGINKGO_WITH_CLANG_TIDY=ON'
  allow_failure: yes

iwyu:
  stage: code_quality
  extends:
    - .build_template
    - .default_variables
    - .full_test_condition
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    EXTRA_CMAKE_FLAGS: '-DGINKGO_WITH_IWYU=ON'
  allow_failure: yes

# Code analysis, coverage and reporting tool
# For short living branches or PRs, try to detect an open PR
sonarqube_cov_:
  stage: code_quality
  extends:
    - .default_variables
    - .quick_test_short_lived_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  script:
    - PR_ID=$(curl -s "https://api.github.com/search/issues?q=sha:${CI_COMMIT_SHA}"
      | jq '.items[0].number')
    - if [[ "${PR_ID}" != "null" ]]; then
        target_branch=$(curl -s
          "https://api.github.com/repos/ginkgo-project/ginkgo/pulls/${PR_ID}" | jq
          '.base.ref' | sed 's/"//g');
        sonar_branching="-Dsonar.pullrequest.branch=${CI_COMMIT_REF_NAME}
          -Dsonar.pullrequest.base=${target_branch}
          -Dsonar.pullrequest.key=${PR_ID}";
      else
        sonar_branching="-Dsonar.branch.name=${CI_COMMIT_REF_NAME}
        -Dsonar.branch.target=develop";
      fi
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=COVERAGE
      -DGINKGO_SONARQUBE_TEST=ON
    - sonar-scanner -Dsonar.login=${SONARQUBE_LOGIN}
      -Dsonar.cfamily.build-wrapper-output=build/bw-output
      -Dsonar.cfamily.gcov.reportsPath=build/Testing/CoverageInfo
      ${sonar_branching}
    - bash <(curl -s https://codecov.io/bash) -f "\!*examples*" -f "\!*third_party*" -f "\!*c\\+\\+*" -f "\!*benchmark*"

# For long living branches, do not detect the PR. A PR would always be detected
# (the one that was merged).
sonarqube_cov:
  stage: code_quality
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm7-intel2019
  script:
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=COVERAGE
      -DGINKGO_SONARQUBE_TEST=ON
    - sonar-scanner -Dsonar.login=${SONARQUBE_LOGIN}
      -Dsonar.cfamily.build-wrapper-output=build/bw-output
      -Dsonar.cfamily.gcov.reportsPath=build/Testing/CoverageInfo
      -Dsonar.branch.name=${CI_COMMIT_REF_NAME}
    - bash <(curl -s https://codecov.io/bash) -f "\!*examples*" -f "\!*third_party*" -f "\!*c\\+\\+*" -f "\!*benchmark*"


# Deploy documentation to github-pages
gh-pages:
  stage: deploy
  interruptible: false
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_git_template
    - .use_status-job-settings
  variables:
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo-generated-documentation.git
  script:
    # build docs
    - mkdir -p ${CI_JOB_NAME} && pushd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_CUDA_COMPILER=${CUDA_COMPILER} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
        -DBUILD_SHARED_LIBS=ON ${EXTRA_CMAKE_FLAGS} -DGINKGO_DEVEL_TOOLS=OFF
        -DGINKGO_BUILD_REFERENCE=OFF -DGINKGO_BUILD_OMP=OFF -DGINKGO_BUILD_CUDA=OFF
        -DGINKGO_BUILD_HIP=OFF -DGINKGO_BUILD_SYCL=OFF -DGINKGO_BUILD_MPI=OFF
        -DGINKGO_BUILD_TESTS=OFF -DGINKGO_BUILD_EXAMPLES=OFF
        -DGINKGO_BUILD_DOC=ON -DGINKGO_DOC_GENERATE_PDF=ON
    - make usr
    - make pdf
    - popd
    # publish it
    - git clone ${PUBLIC_REPO} -b gh-pages gh-pages-repo
    - rm -rf gh-pages-repo/doc/${CI_COMMIT_REF_NAME}
    - mkdir -p gh-pages-repo/doc
    - mkdir -p gh-pages-repo/doc/pdf
    - cp -r ${CI_JOB_NAME}/doc/usr gh-pages-repo/doc/${CI_COMMIT_REF_NAME}
    - cp ${CI_JOB_NAME}/doc/pdf.pdf gh-pages-repo/doc/pdf/${CI_COMMIT_REF_NAME}.pdf
    - export CURRENT_SHA="$(git rev-parse --short HEAD)"
    - cd gh-pages-repo
    - git add -A
    - git diff --quiet HEAD ||
      (git commit -m "Update documentation from ginkgo-project/ginkgo@${CURRENT_SHA}" && git push)
  dependencies: null
  needs: []


threadsanitizer:
  stage: QoS_tools
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
  script:
    - LD_PRELOAD=/usr/local/lib/libomp.so
      CC=clang CXX=clang++
        ctest -V -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=TSAN
        -DCTEST_MEMORYCHECK_TYPE=ThreadSanitizer
        -DCTEST_MEMORYCHECK_SANITIZER_OPTIONS=ignore_noninstrumented_modules=1
        --timeout 6000

leaksanitizer:
  stage: QoS_tools
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
  script:
    - ctest -V -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=LSAN
      -DCTEST_MEMORYCHECK_TYPE=LeakSanitizer

addresssanitizer:
  stage: QoS_tools
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
  script:
    - ctest -V -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=ASAN
      -DCTEST_MEMORYCHECK_TYPE=AddressSanitizer

undefinedsanitizer:
  stage: QoS_tools
  extends:
    - .default_variables
    - .deploy_condition
    - .before_script_template
    - .use_gko-cuda101-openmpi-gnu8-llvm13-intel2019
  script:
    # the Gold linker is required because of a linker flag issues given by UBsan
    # in the Ubuntu setup we are using.
    - ctest -V -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=UBSAN
      -DCTEST_MEMORYCHECK_TYPE=UndefinedBehaviorSanitizer

cudamemcheck:
  stage: QoS_tools
  extends:
    - .before_script_template
    - .default_variables
    - .deploy_condition
  image: ginkgohub/cuda:101-openmpi-gnu8-llvm13-intel2019
  tags:
    - private_ci
    - nvidia-gpu
  script:
    - ctest -V -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=RelWithDebInfo
      -DCTEST_MEMORYCHECK_TYPE=CudaMemcheck

new-issue-on-failure:
  stage: on-failure
  interruptible: false
  extends:
    - .default_variables
    - .use_status-job-settings
  script: curl --request POST "https://gitlab.com/api/v4/projects/${PROJECT_ID}/issues?private_token=${BOT_ACCESS_TOKEN}&title=Error%20in%20${CI_PROJECT_NAME}%20with%20pipeline%20${CI_PIPELINE_ID}%20for%20commit%20${CI_COMMIT_SHA}&labels&description=${CI_PIPELINE_URL}"
  when: on_failure
  only:
    refs:
      - develop
      - master
  dependencies: []


## Benchmark SpMV
benchmark-cuda-spmv-build:
  extends:
    - .build_template
    - .default_variables
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
    - .benchmark-spmv-cuda-rules
  stage: benchmark-build
  variables:
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    BUILD_MPI: "ON"
    MPI_AS_ROOT: "ON"
    BUILD_HIP: "OFF"
    BUILD_TYPE: "Release"
    CUDA_ARCH: 80
    USE_NAME: "benchmark-cuda-spmv-${CI_PIPELINE_ID}"
    KEEP_CONTAINER: "ON"
    USE_SLURM: 0


# The name must be of the same as above without `-build`
benchmark-cuda-spmv:
  extends:
    - .benchmark_template
    - .default_variables
    - .use_gko-cuda110-mvapich2-gnu9-llvm9-intel2020
    - .benchmark-spmv-cuda-rules
  stage: benchmark-cuda
  variables:
    BENCHMARK_REPO: git@github.com:ginkgo-project/ginkgo-data.git
    USE_NAME: "benchmark-cuda-spmv-${CI_PIPELINE_ID}"
    SLURM_PARTITION: "accelerated"
    SLURM_GRES: "gpu:1"
    SLURM_EXCLUSIVE: "ON"
    SLURM_TIME: "4:00:00"
    BENCHMARK: "spmv"
    EXECUTOR: "cuda"
    SYSTEM_NAME: "A100"
  dependencies: null
  needs: [ "benchmark-cuda-spmv-build" ]
