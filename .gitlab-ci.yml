stages:
  - init-status
  - sync
  - trigger_pipeline
  - build
  - test
  - code_quality
  - deploy
  - QoS_tools
  - on-failure
  - finalize-status
  - benchmark-build
  - benchmark-cuda
  - benchmark-omp
  - benchmark-reference

include:
  - local: '.gitlab/image.yml'
  - local: '.gitlab/rules.yml'
  - local: '.gitlab/scripts.yml'
  - local: '.gitlab/variables.yml'
  # This is a workaround to conditionally make the branch pipelines
  # interruptible, because the flag does not directly support rules [1].
  #
  # [1] https://gitlab.com/gitlab-org/gitlab/-/issues/194023#note_1225906002
  - local: '.gitlab/add-interrupt.yml'
    rules:
      - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+/

sync:
  stage: sync
  extends:
    - .default_variables
    - .before_script_git_template
    - .use_status-job-settings
  variables:
    GIT_STRATEGY: none
    PRIVATE_REPO: git@gitlab.com:ginkgo-project/ginkgo.git
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
  script:
    - git clone ${PRIVATE_REPO} -b ${CI_COMMIT_REF_NAME} repo_sync
    - cd repo_sync
    - git pull --ff-only ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PRIVATE_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
  only:
    - master
    - develop


release/latest/gcc:
  extends:
    - .default_variables
    - .build_and_test_script_template
  stage: build
  image: archlinux
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}
    - pacman -Sy --noconfirm git gcc cmake ninja python3
  variables:
    BUILD_TYPE: "Release"
    BUILD_OMP: "ON"
  tags:
    - private_ci


release/latest/clang:
  extends:
    - .default_variables
    - .build_script_template
  stage: build
  image: archlinux
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}
    - pacman -Sy --noconfirm git clang openmp cmake ninja python3
  variables:
    BUILD_TYPE: "Release"
    BUILD_OMP: "ON"
    CXX_COMPILER: "clang++"
  tags:
    - private_ci


release/latest/cuda:
  extends:
    - .default_variables
    - .build_script_template
  stage: build
  image: nvidia/cuda:12.6.3-devel-ubuntu24.04
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}
    - apt update && apt install -y git cmake ninja-build python3
  variables:
    BUILD_TYPE: "Release"
    BUILD_CUDA: "ON"
    CUDA_ARCH_STR: "-DCMAKE_CUDA_ARCHITECTURES=80"
  tags:
    - nvidia-gpu


release/latest/rocm:
  extends:
    - .default_variables
    - .build_script_template
  image: rocm/dev-ubuntu-24.04:6.3-complete
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}
    - export CMAKE_PREFIX_PATH=/opt/rocm
    - apt update && apt install -y git cmake ninja-build python3
  variables:
    BUILD_TYPE: "Release"
    BUILD_HIP: "ON"
  tags:
    - amd-gpu


release/latest/oneapi:
  extends:
    - .default_variables
    - .build_script_template
  image: intel/oneapi-hpckit:2025.0.0-0-devel-ubuntu24.04
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}
    - export CMAKE_PREFIX_PATH=/opt/rocm
    - apt update && apt install -y ninja-build
  variables:
    BUILD_TYPE: "Release"
    BUILD_SYCL: "ON"
    CXX_COMPILER: "icpx"
  tags:
    - intel-gpu
