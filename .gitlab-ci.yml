image: base/devel

stages:
  - sync
  - build
  - test
  - deploy

# Templates with reasonable defaults for builds and tests
.variables_template: &default_variables
  C_COMPILER: gcc
  CXX_COMPILER: g++
  BUILD_TYPE: Debug
  BUILD_REFERENCE: "ON"
  BUILD_OMP: "OFF"
  BUILD_CUDA: "OFF"
  EXTRA_CMAKE_FLAGS: ""
  EXTRA_PACKAGES: ""

.before_script_template: &default_before_script
  - pacman-db-upgrade
  - pacman --noconfirm -Syu cmake git python ${EXTRA_PACKAGES}
  - export OMP_NUM_THREADS=4

.before_script_git_template: &git_before_script
  - pacman-db-upgrade
  - pacman --noconfirm -Syu openssh git ${EXTRA_PACKAGES}
  - eval $(ssh-agent -s)
  - echo "${BOT_KEY}" | tr -d '\r' | ssh-add - >/dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa gitlab.com github.com >>~/.ssh/known_hosts
  - git config --global user.name "${BOT_USER}"
  - git config --global user.email "${BOT_EMAIL}"

.build_template: &default_build
  stage: build
  variables: *default_variables
  before_script: *default_before_script
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=ON
        ${EXTRA_CMAKE_FLAGS} -DDEVEL_TOOLS=OFF
        -DBUILD_REFERENCE=${BUILD_REFERENCE} -DBUILD_OMP=${BUILD_OMP}
        -DBUILD_CUDA=${BUILD_CUDA} -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
    - make -j$(grep "core id" /proc/cpuinfo | sort -u | wc -l)
  artifacts:
    paths:
      - build/

.test_template: &default_test
  stage: test
  before_script: *default_before_script
  script:
    - cd ${CI_JOB_NAME/test/build}
    - make test

sync:
  stage: sync
  variables:
    GIT_STRATEGY: none
    PRIVATE_REPO: git@gitlab.com:ginkgo-project/ginkgo.git
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
  before_script: *git_before_script
  script:
    - git clone ${PRIVATE_REPO} -b ${CI_COMMIT_REF_NAME} repo_sync
    - cd repo_sync
    - git pull --ff-only ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PRIVATE_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
  only:
    - master
    - develop

# Build jobs
build/gcc/core/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    BUILD_REFERENCE: "off"

build/clang/core/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    BUILD_REFERENCE: "off"
    C_COMPILER: clang
    CXX_COMPILER: clang++
    EXTRA_PACKAGES: clang

build/gcc/reference/debug:
  <<: *default_build

build/clang/reference/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    C_COMPILER: clang
    CXX_COMPILER: clang++
    EXTRA_PACKAGES: clang

build/gcc/omp/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    BUILD_OMP: "ON"

build/clang/omp/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    EXTRA_PACKAGES: openmp clang
    BUILD_OMP: "ON"
    C_COMPILER: clang
    CXX_COMPILER: clang++

build/gcc/all/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    EXTRA_PACKAGES: cuda
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    EXTRA_CMAKE_FLAGS: &cuda_flags
      -DCMAKE_CUDA_COMPILER=/opt/cuda/bin/nvcc -DCUDA_ARCHITECTURES=60

build/clang/all/debug:
  <<: *default_build
  variables:
    <<: *default_variables
    EXTRA_PACKAGES: openmp clang cuda
    C_COMPILER: clang
    CXX_COMPILER: clang++
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    EXTRA_CMAKE_FLAGS: *cuda_flags


# Test jobs
test/gcc/core/debug:
  <<: *default_test
  dependencies:
    - build/gcc/core/debug

test/clang/core/debug:
  <<: *default_test
  dependencies:
    - build/clang/core/debug

test/gcc/reference/debug:
  <<: *default_test
  dependencies:
    - build/gcc/reference/debug

test/clang/reference/debug:
  <<: *default_test
  dependencies:
    - build/clang/reference/debug


# Deploy documentation to github-pages
gh-pages:
  stage: deploy
  variables:
    <<: *default_variables
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
    EXTRA_PACKAGES: cmake doxygen python
  before_script: *git_before_script
  script:
    - mkdir -p ${CI_JOB_NAME} && pushd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=ON
        ${EXTRA_CMAKE_FLAGS} -DDEVEL_TOOLS=OFF -DBUILD_REFERENCE=OFF
        -DBUILD_OMP=OFF -DBUILD_CUDA=OFF -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF
        -DBUILD_DOC=ON
    - make usr
    - popd
    - git clone ${PUBLIC_REPO} -b gh-pages gh-pages-repo
    - rm -rf gh-pages-repo/doc/develop
    - mkdir -p gh-pages-repo/doc
    - cp -r ${CI_JOB_NAME}/doc/usr gh-pages-repo/doc/develop
    - export CURRENT_SHA="$(git rev-parse --short HEAD)"
    - cd gh-pages-repo
    - git add -A
    - git diff --quiet HEAD ||
      (git commit -m "Update documentation from ${CURRENT_SHA}" && git push)
  dependencies: []
  only:
    refs:
      - develop
    variables:
      - $PUBLIC_CI_TAG
test/gcc/omp/debug:
  <<: *default_test
  dependencies:
    - build/gcc/omp/debug

test/clang/omp/debug:
  <<: *default_test
  variables:
    <<: *default_variables
    EXTRA_PACKAGES: openmp
  dependencies:
    - build/clang/omp/debug
