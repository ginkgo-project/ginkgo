.before_script_template:
  before_script:
    - export NUM_CORES=${CI_PARALLELISM}
    - export OMP_NUM_THREADS=${NUM_CORES}
    - export CCACHE_DIR=${CCACHE_DIR}
    - export CCACHE_MAXSIZE=${CCACHE_MAXSIZE}

.before_script_git_template:
  before_script:
    - eval $(ssh-agent -s)
    - echo "${BOT_KEY}" | tr -d '\r' | ssh-add - >/dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com github.com >>~/.ssh/known_hosts
    - git config --global user.name "${BOT_USER}"
    - git config --global user.email "${BOT_EMAIL}"

.environment_script: &environment_script
  - |
    # extracts the value of the given CMake cache variable
    function get_cache_val() {
        cmake -S ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX} -B . -L -N | grep $1 | sed -e 's/.*=//'
    }
  - if [ -n "${CUDA_ARCH}" ]; then
    export CUDA_ARCH_STR=-DGINKGO_CUDA_ARCHITECTURES=${CUDA_ARCH};
    fi
  - |
    export OMPI_ALLOW_RUN_AS_ROOT=1;
    export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1;
  - export CC=${C_COMPILER} CXX=${CXX_COMPILER} CUDAHOSTCXX=${CXX_COMPILER} CUDACXX=${CUDA_COMPILER}


.configure_template:
  stage: configure
  extends:
    - .before_script_template
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - *environment_script
    - |
      cmake -S ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX} -B . \
      -DGINKGO_BUILD_REFERENCE=ON -DGINKGO_BUILD_OMP=ON \
      -DGINKGO_BUILD_MPI=${BUILD_MPI} -DGINKGO_BUILD_CUDA=${BUILD_CUDA} \
      -DGINKGO_BUILD_HIP=${BUILD_HIP} -DGINKGO_BUILD_SYCL=${BUILD_SYCL} \
      -DGINKGO_MIXED_PRECISION=ON -DGINKGO_FORCE_GPU_AWARE_MPI=ON \
      -DGINKGO_BUILD_TESTS=ON -DGINKGO_FAST_TESTS=ON -DGINKGO_BUILD_EXTLIB_EXAMPLE=OFF \
      -DGINKGO_BUILD_BENCHMARKS=ON -DGINKGO_BENCHMARK_ENABLE_TUNING=ON \
      -DGINKGO_DEVEL_TOOLS=OFF -DGINKGO_WITH_CLANG_TIDY=ON -DGINKGO_WITH_IWYU=ON \
      -DGINKGO_CHECK_CIRCULAR_DEPS=ON -DGINKGO_WITH_CCACHE=ON \
      -DGINKGO_BUILD_PAPI_SDE=OFF -DGINKGO_BUILD_HWLOC=ON \
      -DGINKGO_BUILD_TESTS=ON -DGINKGO_BUILD_EXAMPLES=ON \
      -DGINKGO_BUILD_DOC=OFF
  dependencies: []

.build_template:
  stage: build
  extends:
    - .before_script_template
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - mkdir install_prefix
    - export INSTALL_PREFIX=`pwd`/install_prefix
    - *environment_script
    - cmake -S ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX} -B . --preset ${CI_CMAKE_PRESET} -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
    - ninja -j${NUM_CORES} -l${CI_LOAD_LIMIT} install
    - awk '!/^#/ { print ($2 - $1)/1000 " " $4 }' .ninja_log | sort -nr
  dependencies: []

.build_and_test_template:
  stage: build
  extends:
    - .before_script_template
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - mkdir install_prefix
    - export INSTALL_PREFIX=`pwd`/install_prefix
    - *environment_script
    - cmake -S ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX} -B . --preset ${CI_CMAKE_PRESET} -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
    - ninja -j${NUM_CORES} -l${CI_LOAD_LIMIT} install
    - awk '!/^#/ { print ($2 - $1)/1000 " " $4 }' .ninja_log | sort -nr
    - |
        (( $(ctest -N | tail -1 | sed 's/Total Tests: //') != 0 )) || exit 1
    - ctest --output-on-failure --timeout 6000 ${CTEST_EXTRA_ARGS}
    - ninja test_exportbuild
    - ninja test_install
    - pushd test/test_install
    - ninja install
    - popd
    - |
      if [ "$(get_cache_val GINKGO_RUN_EXAMPLES)" == "ON" ]; then
         export EX_ARG="reference"
         ninja run_all_examples
         ninja validate_all_examples
         if [ "$(get_cache_val GINKGO_BUILD_OMP)" == "ON" ]; then
            export EX_ARG="omp"
            ninja run_all_examples
            ninja validate_all_examples
        fi
        if [ "$(get_cache_val GINKGO_BUILD_CUDA)" == "ON" ]; then
            export EX_ARG="cuda"
            ninja run_all_examples
            ninja validate_all_examples
        fi
        if [ "$(get_cache_val GINKGO_BUILD_HIP)" == "ON" ]; then
            export EX_ARG="hip"
            ninja run_all_examples
            ninja validate_all_examples
        fi
      fi
    - if [ -n "${SYCL_DEVICE_TYPE}" ]; then unset SYCL_DEVICE_TYPE; fi
    - if [ -n "${SYCL_DEVICE_FILTER}" ]; then unset SYCL_DEVICE_FILTER; fi
    - if [ "$(get_cache_val GINKGO_EXPORT_BUILD_DIR)" == "ON" ]; then ninja test_exportbuild; fi
    - if [[ "$(get_cache_val BUILD_SHARED_LIBS)" == "ON" || "$(get_cache_val GINKGO_BUILD_HIP)" != "ON" ]]; then
      PKG_CONFIG_PATH=${INSTALL_PREFIX}/lib/pkgconfig:$PKG_CONFIG_PATH LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH ninja test_pkgconfig;
      fi
  dependencies: []


.horeka_test_template:
  stage: test
  before_script:
    # Sanity checks
    - if [ -z "${USE_NAME}" ]; then exit 111; fi
    - if [ -z "${SLURM_PARTITION}" ]; then exit 222; fi
    - if [[ ! "${SLURM_GRES}" =~ "^gpu*"  ]]; then export NVIDIA_VISIBLE_DEVICES=void; fi
  variables:
    GIT_CLEAN_FLAGS: none
  script:
    # We should be reusing the previous image and build directory.
    # Speedup the tests by limiting the number of OMP threads to CI parallelism.
    - export OMP_NUM_THREADS=${CI_PARALLELISM}
    # The test job should have the name as the image job, only changing
    # build to test
    - cd ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX}
    - cd ${CI_JOB_NAME/test/build}
    - export INSTALL_PREFIX=`pwd`/install_prefix
    - |
        (( $(ctest -N | tail -1 | sed 's/Total Tests: //') != 0 )) || exit 1
    - ctest --output-on-failure --timeout 6000 ${CTEST_EXTRA_ARGS}
    - ninja test_exportbuild
    - ninja test_install
    - pushd test/test_install
    - ninja install
    - popd
    - if [[ "${BUILD_SHARED_LIBS}" == "ON" || "${BUILD_HIP}" != "ON" ]]; then
      PKG_CONFIG_PATH=${INSTALL_PREFIX}/lib/pkgconfig:$PKG_CONFIG_PATH LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH ninja test_pkgconfig;
      fi
  cache: []


.horeka_benchmark_before_script_template:
  before_script:
    # Sanity checks
    - if [ -z "${USE_NAME}" ]; then exit 111; fi
    - if [ -z "${SLURM_PARTITION}" ]; then exit 222; fi
    - if [[ ! "${SLURM_GRES}" =~ "^gpu*"  ]]; then export NVIDIA_VISIBLE_DEVICES=void; fi
    - if [[ -z "${EXECUTOR}" ]]; then exit 233; fi
    - if [[ -z "${SYSTEM_NAME}" ]]; then exit 233; fi
    - if [[ -z "${BENCHMARK}" ]]; then exit 233; fi
    # Set environment variables
    - eval $(ssh-agent -s)
    - echo "${BOT_KEY}" | tr -d '\r' | ssh-add - >/dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - unset OMP_NUM_THREADS
    - git config --global user.name "${BOT_USER}"
    - git config --global user.email "${BOT_EMAIL}"


.benchmark_template:
  extends:
    - .horeka_benchmark_before_script_template
  variables:
    GIT_CLEAN_FLAGS: none
  script:
    # Install rsync
    - pushd /
    - git clone https://github.com/WayneD/rsync -b v3.2.4
    - pushd rsync
    - ./configure --disable-lz4 --disable-openssl --disable-doc --disable-xxhash --disable-md2man
    - make -j10 install
    - popd
    - popd
    # Setup ssget
    - git clone https://github.com/ginkgo-project/ssget
    - sed -i 's:ARCHIVE_LOCATION="${HOME}/.config/ssget":ARCHIVE_LOCATION="/ssget":' ssget/ssget
    - export PATH=$PWD/ssget:$PATH
    # Setup the benchmark
    - cd ${CI_PROJECT_DIR}${CI_PROJECT_DIR_SUFFIX}
    - cd ${CI_JOB_NAME}-build
    - chmod +x benchmark/run_all_benchmarks.sh
    - cd benchmark
    - git clone ${BENCHMARK_REPO} data-repo
    # Use the representative matrix list and launch benchmark
    - export MATRIX_LIST_FILE=$PWD/data-repo/data/represent.list
    - ./run_all_benchmarks.sh
    # Publish the results
    - rsync -av results/ data-repo/data/
    - cd data-repo/data/
    - ./build-list . > list.json
    - ./agregate < list.json > agregate.json
    - chmod +x represent
    - ./represent $PWD > represent.json
    - git add -A
    - git diff --quiet HEAD || (git commit -m "Benchmark ${BENCHMARK} on ${EXECUTOR} with ${SYSTEM_NAME} of ginkgo-project/ginkgo@${CI_COMMIT_SHORT_SHA}" && git push)
  cache: []
